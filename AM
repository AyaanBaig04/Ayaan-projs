#Code based on MIT GPT, and Andrej Karpathy's youtube video on creating transformers.
#original output
#thingivoiThat s:Dorian shooked.
#â€œOh! so, Mr . Gray . He hast ruggardeners had once not do, who hearing to back to
#know whom as almost the devot a grey-shole upersisted and the lay of
#terror the bile moment, with a shad touch puddled hange. He door, after the the black shadow as
#the grass of a moment and there dree
#if the shound, he went in a

import PyPDF2
import PyPDF2
import torch
import torch.nn as nn
from torch.nn import functional as F

#params
batch_size = 64
block_size = 256
max_iters = 5000
eval_interval = 500
learning_rate = 3e-4
eval_iters = 200
num_embeddings = 384
n_head = 6
n_layer = 6
dropout = 0.2

#If gpu is available, compute there instead
device = 'cuda' if torch.cuda.is_available() else 'cpu'

torch.manual_seed(2024)

#opening texts
text = ""
#The Mysterious Stranger
pdfFileObj = open(r'C:\AM Script\The Project Gutenberg Book of The Mysterious Stranger and Other Stories, by Mark Twain.pdf', 'rb') #read as binary
pdfReader = PyPDF2.PdfReader(pdfFileObj)
for page in range(len(pdfReader.pages)):
    pageObj = pdfReader.pages[page]
    text += pageObj.extract_text()
pdfFileObj.close()

#Paradise Lost
pdfFileObj = open(r'C:\AM Script\The Project Gutenberg eBook of Paradise Lost, by John Milton.pdf', 'rb') #read as binary
pdfReader = PyPDF2.PdfReader(pdfFileObj)
for page in range(len(pdfReader.pages)):
    pageObj = pdfReader.pages[page]
    text += pageObj.extract_text()
pdfFileObj.close()

#Dorian Gray
pdfFileObj = open(r'C:\AM Script\The Project Gutenberg eBook of The Picture of Dorian Gray, by Oscar Wilde.pdf', 'rb') #read as binary
pdfReader = PyPDF2.PdfReader(pdfFileObj)
for page in range(len(pdfReader.pages)):
    pageObj = pdfReader.pages[page]
    text += pageObj.extract_text()
pdfFileObj.close()

#all unique characters from these stories
chars = sorted(list(set(text)))
vocab_size = len(chars)

#mapping chars to ints
stoi = {ch:i for i,ch in enumerate(chars)}
itos = {i:ch for i,ch in enumerate(chars)}
encode = lambda s: [stoi[c] for c in s]
decode = lambda l: ''.join([itos[i] for i in l])

#train and test split of text
data = torch.tensor(encode(text), dtype=torch.long)
ninetyPercent = int(0.9*len(data))
training = data[:ninetyPercent]
testing = data[ninetyPercent:]

#data loading
def get_batch(split):
    data = training if split == 'train' else testing
    ix = torch.randint(len(data) - block_size, (batch_size,))
    x = torch.stack([data[i:i+block_size] for i in ix])
    y = torch.stack([data[i+1:i+block_size+1] for i in ix])
    x, y = x.to(device), y.to(device)
    return x, y

#distance of prediction from test values
@torch.no_grad()
def estimate_loss():
    out = {}
    model.eval()
    for split in ['training', 'testing']:
        losses = torch.zeros(eval_iters)
        for k in range(eval_iters):
            X, Y = get_batch(split)
            logits, loss = model(X, Y)
            losses[k] = loss.item()
        out[split] = losses.mean()
        model.train()
    return out

#self attention module
class head(nn.Module):

    #linear layers?
    def __init__(self, head_size):
        super().__init__()
        #layer where token reads off logit lookup table
        self.key = nn.Linear(num_embeddings, head_size, bias=False)
        self.query = nn.Linear(num_embeddings, head_size, bias=False)
        self.value = nn.Linear(num_embeddings, head_size, bias=False)
        self.register_buffer('tril', torch.tril(torch.ones(block_size, block_size)))
        self.dropout = nn.Dropout(dropout)

    def forward(self, x):
        B, T, C = x.shape
        k = self.key(x)
        q = self.query(x)
        #compute attention scores
        wei = q @ k.transpose(-2, -1) * C**-0.5
        wei = wei.masked_fill(self.tril[:T, :T] == 0, float('-inf'))
        wei = F.softmax(wei, dim=-1)
        wei = self.dropout(wei)
        #perform weighted aggregation of values
        v = self.value(x)
        out = wei @ v
        return out

class multiHeadAttention(nn.Module):

    # multiple heads doing self attention in parallel
    def __init__(self, num_heads, head_size):
        super().__init__()
        self.heads = nn.ModuleList([head(head_size) for _ in range(num_heads)])
        self.proj = nn.Linear(num_embeddings, num_embeddings)
        self.dropout = nn.Dropout(dropout)

    def forward(self, x):
        out = torch.cat([h(x) for h in self.heads], dim=-1)
        out = self.dropout(self.proj(out))
        return out

#layer for thinking on data individualy from the slef attention heads
class feedForward(nn.Module):
    def __init__(self, num_embeddings):
        super().__init__()
        self.net = nn.Sequential(
            nn.Linear(num_embeddings, 4 * num_embeddings),
            nn.ReLU(),
            nn.Linear(4 * num_embeddings, num_embeddings),
            nn.Dropout(dropout),
        )

    def forward(self, x):
        return self.net(x)

#for adjusting head sizes for the transformer
class block(nn.Module):
    def __init__(self, num_embeddings):
        super().__init__()
        head_size = num_embeddings // 4
        self.sa = multiHeadAttention(4, head_size)
        self.ffwd = feedForward(num_embeddings)
        self.ln1 = nn.LayerNorm(num_embeddings)
        self.ln2 = nn.LayerNorm(num_embeddings)

    def forward(self, x):
      #indicates that you've performed an operation that modifies a tensor in-place,
      #and then tried to compute gradients through that tensor. PyTorch's autograd system
      #requires that tensors involved in gradient computations retain their history,
      #and in-place modifications disrupt this history.

        x = x + self.sa(self.ln1(x))
        x = x + self.ffwd(self.ln2(x))
        #residual connection
        return x



#Bigram Model
class BigramLanguageModel(nn.Module):
    def __init__(self):
        super().__init__()
        #line where tokens read off logit for next prediction from lookup table
        self.token_embedding_table = nn.Embedding(vocab_size, num_embeddings)
        self.position_embedding_table = nn.Embedding(block_size, num_embeddings)
        self.blocks = nn.Sequential(
            block(num_embeddings),
            block(num_embeddings),
            block(num_embeddings),
            nn.LayerNorm(num_embeddings),
        )
        self.lm_head = nn.Linear(num_embeddings, vocab_size)


    def forward(self, idx, targets=None):
        B, T = idx.shape
        #idx and targets are both (B,T) tensor (multidimensional array) of integers
        token_embedding_table = self.token_embedding_table(idx) # (B,T,C)
        position_embedding_table = self.position_embedding_table(torch.arange(T, device=device)) # (T,C)
        token_embedding_table += position_embedding_table # (B,T,C)
        token_embedding_table = self.blocks(token_embedding_table)
        logits = self.lm_head(token_embedding_table) #(B, T, vocab_size)

        if targets is None:
            loss = None
        else:
            B, T, C = logits.shape
            logits = logits.view(B*T, C)
            targets = targets.view(B*T)
            loss = F.cross_entropy(logits, targets)

        return logits, loss

    def generate(self, idx, max_new_tokens):
        #idx is (B, T) array of indices in the current context
        for _ in range(max_new_tokens):
            #crop idx to the last block_size tokens
            idx_cond = idx[:, -block_size:]
            #get predictions
            logits, loss = self(idx_cond)
            #focus only on last time step
            logits = logits[:, -1, :] #becomes (B, C)
            #apply softmax to get probabilities
            probs = F.softmax(logits, dim=-1) # (B, C)
            #sample from distribution
            idx_next = torch.multinomial(probs, num_samples=1) # (B, 1)
            #append sampled index to running sequence
            idx = torch.cat((idx, idx_next), dim=1) # (B, T+1)
        return idx

#training
model = BigramLanguageModel()
m = model.to(device)

#optimizer
optimizer = torch.optim.AdamW(model.parameters(), lr=learning_rate)

for iter in range(max_iters):
    if iter % eval_interval == 0:
        losses = estimate_loss()
        print(f"step {iter}: train loss {losses['training']:.4f}, test loss {losses['testing']:.4f}")

    #sample a batch of data
    xb, yb = get_batch('training')

    #evaluate the loss
    logits, loss = model(xb, yb)
    optimizer.zero_grad(set_to_none=True)
    loss.backward()
    optimizer.step()

#generate
context = torch.zeros((1, block_size), dtype=torch.long, device=device)
print(decode(m.generate(context, max_new_tokens=500)[0].tolist()))



